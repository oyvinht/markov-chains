(defun test-ksi ()
  (let ((hmm (make-instance 'hmm
                           :init-probabilities
                            (let ((htbl (make-hash-table)))
                              (setf (gethash :s1 htbl) 0.2)
                              (setf (gethash :s2 htbl) 0.8)
                              htbl)
                            :transition-probabilities
                            (let ((htbl (make-hash-table))
                                  (s1-htbl (make-hash-table))
                                  (s2-htbl (make-hash-table)))
                              (setf (gethash :s1 s1-htbl) 0.5)
                              (setf (gethash :s2 s1-htbl) 0.5)
                              (setf (gethash :s1 htbl) s1-htbl)
                              (setf (gethash :s1 s2-htbl) 0.3)
                              (setf (gethash :s2 s2-htbl) 0.7)
                              (setf (gethash :s2 htbl) s2-htbl)
                              htbl)
                            :outcome-probabilities
                            (let ((htbl (make-hash-table))
                                  (s1-htbl (make-hash-table))
                                  (s2-htbl (make-hash-table)))
                              (setf (gethash :N s1-htbl) 0.3)
                              (setf (gethash :E s1-htbl) 0.7)
                              (setf (gethash :s1 htbl) s1-htbl)
                              (setf (gethash :N s2-htbl) 0.8)
                              (setf (gethash :E s2-htbl) 0.2)
                              (setf (gethash :s2 htbl) s2-htbl)
                              htbl))))
    (ksi hmm (vector :N :E :N :N :N :E :E) 1 (nth 1 (states hmm)) :s2)))

(defun test-gamma ()
  (let ((hmm (make-instance 'hmm
                            :init-probabilities
                            (let ((htbl (make-hash-table)))
                              (setf (gethash :s1 htbl) 0.2)
                              (setf (gethash :s2 htbl) 0.8)
                              htbl)
                            :transition-probabilities
                            (let ((htbl (make-hash-table))
                                  (s1-htbl (make-hash-table))
                                  (s2-htbl (make-hash-table)))
                              (setf (gethash :s1 s1-htbl) 0.5)
                              (setf (gethash :s2 s1-htbl) 0.5)
                              (setf (gethash :s1 htbl) s1-htbl)
                              (setf (gethash :s1 s2-htbl) 0.3)
                              (setf (gethash :s2 s2-htbl) 0.7)
                              (setf (gethash :s2 htbl) s2-htbl)
                              htbl)
                            :outcome-probabilities
                            (let ((htbl (make-hash-table))
                                  (s1-htbl (make-hash-table))
                                  (s2-htbl (make-hash-table)))
                              (setf (gethash :N s1-htbl) 0.3)
                              (setf (gethash :E s1-htbl) 0.7)
                              (setf (gethash :s1 htbl) s1-htbl)
                              (setf (gethash :N s2-htbl) 0.8)
                              (setf (gethash :E s2-htbl) 0.2)
                              (setf (gethash :s2 htbl) s2-htbl)
                              htbl))))
    (gamma hmm (vector :N :E :N :N :N :E :E) 0 :s1)))

(defun test-ksi-gamma ()
  (let ((observations (vector :N :N :N :N :N :E))
        (hmm (make-instance 'hmm
                            :init-probabilities
                            (let ((htbl (make-hash-table)))
                              (setf (gethash :s1 htbl) 0.2)
                              (setf (gethash :s2 htbl) 0.8)
                              htbl)
                            :transition-probabilities
                            (let ((htbl (make-hash-table))
                                  (s1-htbl (make-hash-table))
                                  (s2-htbl (make-hash-table)))
                              (setf (gethash :s1 s1-htbl) 0.5)
                              (setf (gethash :s2 s1-htbl) 0.5)
                              (setf (gethash :s1 htbl) s1-htbl)
                              (setf (gethash :s1 s2-htbl) 0.3)
                              (setf (gethash :s2 s2-htbl) 0.7)
                              (setf (gethash :s2 htbl) s2-htbl)
                              htbl)
                            :outcome-probabilities
                            (let ((htbl (make-hash-table))
                                  (s1-htbl (make-hash-table))
                                  (s2-htbl (make-hash-table)))
                              (setf (gethash :N s1-htbl) 0.3)
                              (setf (gethash :E s1-htbl) 0.7)
                              (setf (gethash :s1 htbl) s1-htbl)
                              (setf (gethash :N s2-htbl) 0.8)
                              (setf (gethash :E s2-htbl) 0.2)
                              (setf (gethash :s2 htbl) s2-htbl)
                              htbl))))
    (gamma hmm observations 0 (nth 0 (states hmm)))
    (gamma hmm observations 1 (nth 1 (states hmm)))))

(defun test-bw ()
  (let ((my-hmm (make-instance 'hmm
                            :init-probabilities
                            (let ((htbl (make-hash-table)))
                              (setf (gethash :s1 htbl) 1/5)
                              (setf (gethash :s2 htbl) 4/5)
                              htbl)
                            :transition-probabilities
                            (let ((htbl (make-hash-table))
                                  (s1-htbl (make-hash-table))
                                  (s2-htbl (make-hash-table)))
                              (setf (gethash :s1 s1-htbl) 1/2)
                              (setf (gethash :s2 s1-htbl) 1/2)
                              (setf (gethash :s1 htbl) s1-htbl)
                              (setf (gethash :s1 s2-htbl) 3/10)
                              (setf (gethash :s2 s2-htbl) 7/10)
                              (setf (gethash :s2 htbl) s2-htbl)
                              htbl)
                            :outcome-probabilities
                            (let ((htbl (make-hash-table))
                                  (s1-htbl (make-hash-table))
                                  (s2-htbl (make-hash-table)))
                              (setf (gethash :N s1-htbl) 3/10)
                              (setf (gethash :E s1-htbl) 7/10)
                              (setf (gethash :s1 htbl) s1-htbl)
                              (setf (gethash :N s2-htbl) 4/5)
                              (setf (gethash :E s2-htbl) 1/5)
                              (setf (gethash :s2 htbl) s2-htbl)
                              htbl))))
    ;; (normalize (slot-value my-hmm 'init-probabilities))
    (let ((new-hmm (baum-welch my-hmm (vector (vector :N :N :N :N :N :E :E :N :N :N)) 1)))
      (and (= (gethash :s1 (init-probabilities new-hmm))
              408707772754695/5686746786886247)
           (= (gethash :E (gethash :s2 (outcome-probabilities new-hmm)))
              644093364165215/7578956991135697)
           (= (gethash :s2 (gethash :s1 (transition-probabilities new-hmm)))
              2528784460364384/4509363636769033))
           )))
