
(defun test-viterbi-2 ()
  (let ((hmm (make-instance 'hmm
                            :init-probabilities
                            (let ((htbl (make-hash-table)))
                              (setf (gethash :healthy htbl) 0.6)
                              (setf (gethash :fever htbl) 0.4)
                              htbl)
                            :transition-probabilities
                            (let ((htbl (make-hash-table))
                                  (h-htbl (make-hash-table))
                                  (f-htbl (make-hash-table)))
                              (setf (gethash :healthy h-htbl) 0.7)
                              (setf (gethash :fever h-htbl) 0.3)
                              (setf (gethash :healthy htbl) h-htbl)
                              (setf (gethash :healthy f-htbl) 0.4)
                              (setf (gethash :fever f-htbl) 0.6)
                              (setf (gethash :fever htbl) f-htbl)
                              htbl)
                            :outcome-probabilities
                            (let ((htbl (make-hash-table))
                                  (h-htbl (make-hash-table))
                                  (f-htbl (make-hash-table)))
                              (setf (gethash :normal h-htbl) 0.5)
                              (setf (gethash :cold h-htbl) 0.4)
                              (setf (gethash :dizzy h-htbl) 0.1)
                              (setf (gethash :healthy htbl) h-htbl)
                              (setf (gethash :normal f-htbl) 0.1)
                              (setf (gethash :cold f-htbl) 0.3)
                              (setf (gethash :dizzy f-htbl) 0.6)
                              (setf (gethash :fever htbl) f-htbl)
                              htbl))))
    (viterbi hmm (vector :normal :cold :dizzy))))


(defun test-viterbi ()
  (let ((hmm (make-instance 'hmm
                            :init-probabilities
                            (let ((htbl (make-hash-table)))
                              (setf (gethash :s1 htbl) 0.2)
                              (setf (gethash :s2 htbl) 0.8)
                              htbl)
                            :transition-probabilities
                            (let ((htbl (make-hash-table))
                                  (s1-htbl (make-hash-table))
                                  (s2-htbl (make-hash-table)))
                              (setf (gethash :s1 s1-htbl) 0.5)
                              (setf (gethash :s2 s1-htbl) 0.5)
                              (setf (gethash :s1 htbl) s1-htbl)
                              (setf (gethash :s1 s2-htbl) 0.3)
                              (setf (gethash :s2 s2-htbl) 0.7)
                              (setf (gethash :s2 htbl) s2-htbl)
                              htbl)
                             :outcome-probabilities
                             (let ((htbl (make-hash-table))
                                   (s1-htbl (make-hash-table))
                                   (s2-htbl (make-hash-table)))
                               (setf (gethash :N s1-htbl) 0.3)
                               (setf (gethash :E s1-htbl) 0.7)
                               (setf (gethash :s1 htbl) s1-htbl)
                               (setf (gethash :N s2-htbl) 0.8)
                               (setf (gethash :E s2-htbl) 0.2)
                               (setf (gethash :s2 htbl) s2-htbl)
                               htbl))))
    (viterbi hmm (vector :N :E :N))))
